三种ack 方式

queue -> 读取一消息 -> 待确认消息 -> 确认消息

1. 必须使用将前一个消息确认后，才等读取后一个消息，否则，自能一直读取同一个消息
2. 可以有一个却确认消息队列，每读取一个消息，都放入待确认消息队列中，当队列满了之后，就不能在读取消息，每确认一个消息，就从待确认队列中移除它
3. 不限制长度的待确认消息队列

实现
1-ack方式实现
    可以通过原来的接口实现
2-ack方式实现
    参数
        可以存在的待确认队列长度
        对ack id 的一个分组参数基数

    维护一个size，表示ack queue的大小
    维护一个现在读取的id，global_reader_cursor
    维护上次还没有ack的分组id
    维护本地为ack分组的id
    读取消息实现
        情况有两种，分别是
        1. 上次ack分租为消费完
            聚合上次的ack分组
            对global_reader_cursor 在上次分组id内的，使用iterator 读取下一个消息，对于不在的，使用global_reader_cursor + 1 的方式去读
            取消息
        2. 上次ack分组消费完
            直接使用global_reader_cursor 加一的方式读取


2-ack实现方式2
    只需要维护global_reader_cursor
        对于提交的id，判断是否大于，若大于，则代表不合法
    第一次启动是直接使用iterator 读取，直到iterator 的next 返回false，之后，就使用head参数自增完成
